version: 2.1

orbs:
  nx: nrwl/nx@1.7.0
  utils: ethereum-optimism/circleci-utils@1.0.17

commands:
  setup:
    description: 'Setup Node.js environment with pnpm'
    steps:
      - utils/checkout-with-mise # Install dependencies
      - run:
          name: Install dependencies
          environment:
            NPM_TOKEN: nada
          command: |
            pnpm i --frozen-lockfile

jobs:
  check:
    docker:
      - image: cimg/node:20.11
    steps:
      - setup
      - run:
          name: Run Build
          command: pnpm build
      - run:
          name: Run TypeChecker
          command: pnpm typecheck
      - run:
          name: Run Linters
          command: pnpm lint
      - run:
          name: Run SDK Tests
          command: cd packages/sdk && pnpm test
      - run:
          name: Run Frontend Tests
          command: cd packages/demo/frontend && pnpm test
      - run:
          name: Run Backend Tests
          command: cd packages/demo/backend && pnpm test

  docker-build:
    environment:
      DOCKER_BUILDKIT: 1
    docker:
      - image: cimg/base:2024.01
    parameters:
      docker_name:
        description: Docker image name
        type: string
      docker_tags:
        description: Docker image tags as csv
        type: string
      docker_file:
        description: Path to Dockerfile
        type: string
      docker_context:
        description: Docker build context
        type: string
      docker_target:
        description: Docker build target for multi-stage builds
        type: string
      registry:
        description: Docker registry
        type: string
        default: 'us-docker.pkg.dev'
      repo:
        description: Docker repo
        type: string
        default: 'oplabs-tools-artifacts/images'
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: mkdir -p /tmp/docker_images
      - run:
          name: Build
          command: |
            # Check to see if DOCKER_HUB_READ_ONLY_TOKEN is set (i.e. we are in repo) before attempting to use secrets.
            # Building should work without this read only login, but may get rate limited.
            if [[ -v DOCKER_HUB_READ_ONLY_TOKEN ]]; then
              echo "$DOCKER_HUB_READ_ONLY_TOKEN" | docker login -u "$DOCKER_HUB_READ_ONLY_USER" --password-stdin
            fi
            IMAGE_BASE="<<parameters.registry>>/<<parameters.repo>>/<<parameters.docker_name>>"
            DOCKER_TAGS=$(echo -ne <<parameters.docker_tags>> | sed "s/,/\n/g" | sed "s/[^a-zA-Z0-9\n]/-/g" | sed -e "s|^|-t ${IMAGE_BASE}:|")
            TARGET_OPTION=""
            if [[ -n "<<parameters.docker_target>>" ]]; then
              TARGET_OPTION="--target <<parameters.docker_target>> --build-arg DOCKER_TARGET=<<parameters.docker_target>>"
            fi
            docker build \
              $TARGET_OPTION \
              $(echo -ne $DOCKER_TAGS | tr '\n' ' ') \
              -f <<parameters.docker_file>> \
              <<parameters.docker_context>>
      - run:
          name: Save
          command: |
            IMAGE_BASE="<<parameters.registry>>/<<parameters.repo>>/<<parameters.docker_name>>"
            DOCKER_LABELS=$(echo -ne <<parameters.docker_tags>> | sed "s/,/\n/g" | sed "s/[^a-zA-Z0-9\n]/-/g")
            echo -ne $DOCKER_LABELS | tr ' ' '\n' | xargs -I {} docker save -o /tmp/docker_images/<<parameters.docker_name>>_{}.tar $IMAGE_BASE:{}
      - persist_to_workspace:
          root: /tmp/docker_images
          paths:
            - '.'

  docker-publish:
    parameters:
      docker_name:
        description: Docker image name
        type: string
      docker_tags:
        description: Docker image tags as csv
        type: string
      registry:
        description: Docker registry
        type: string
        default: 'us-docker.pkg.dev'
      repo:
        description: Docker repo
        type: string
        default: 'oplabs-tools-artifacts/images'
    machine:
      image: ubuntu-2204:2024.01.1
    steps:
      - attach_workspace:
          at: /tmp/docker_images
      - run:
          name: Docker load
          command: |
            DOCKER_LABELS=$(echo -ne <<parameters.docker_tags>> | sed "s/,/\n/g" | sed "s/[^a-zA-Z0-9\n]/-/g")
            echo -ne $DOCKER_LABELS | tr ' ' '\n' | xargs -I {} docker load -i /tmp/docker_images/<<parameters.docker_name>>_{}.tar
      - run:
          name: Setup gcloud CLI
          command: |
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            sudo apt-get update && sudo apt-get install google-cloud-cli
      - run:
          name: Authenticate with service account
          command: |
            if [[ -n "${GOOGLE_SERVICE_ACCOUNT_KEY}" ]]; then
              echo "${GOOGLE_SERVICE_ACCOUNT_KEY}" | base64 --decode > /tmp/gcp-key.json
              gcloud auth activate-service-account --key-file /tmp/gcp-key.json
            fi
      - run:
          name: Publish
          command: |
            gcloud auth configure-docker <<parameters.registry>>
            IMAGE_BASE="<<parameters.registry>>/<<parameters.repo>>/<<parameters.docker_name>>"
            DOCKER_TAGS=$(echo -ne <<parameters.docker_tags>> | sed "s/,/\n/g" | sed "s/[^a-zA-Z0-9\n]/-/g" | sed -e "s|^|${IMAGE_BASE}:|")
            echo -ne $DOCKER_TAGS | tr ' ' '\n' | xargs -L1 docker push

workflows:
  check-workflow:
    jobs:
      - check

  build-and-publish-backend:
    when:
      and:
        - equal: [<<pipeline.git.branch>>, main]
    jobs:
      - docker-build:
          name: verbs-backend-docker-build
          docker_file: ./packages/demo/backend/Dockerfile
          docker_name: verbs-backend
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>,latest
          docker_context: .
          docker_target: production
      - docker-publish:
          name: verbs-backend-docker-publish
          docker_name: verbs-backend
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>,latest
          context:
            - oplabs-gcr
          requires:
            - verbs-backend-docker-build

  build-and-publish-frontend:
    when:
      and:
        - equal: [<<pipeline.git.branch>>, main]
    jobs:
      - docker-build:
          name: verbs-frontend-docker-build
          docker_file: ./packages/demo/frontend/Dockerfile
          docker_name: verbs-frontend
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>,latest
          docker_context: .
          docker_target: production
      - docker-publish:
          name: verbs-frontend-docker-publish
          docker_name: verbs-frontend
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>,latest
          context:
            - oplabs-gcr
          requires:
            - verbs-frontend-docker-build